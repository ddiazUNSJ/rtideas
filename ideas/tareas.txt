
TAREAS Ideas:

> Filtrar ideas segun la instancia del lado del servidor (publicacion). +-
> Login
> Testing global - mejoras
*****************************3-8-17*************************************************
1)	Colocar el nombre de la sesión, grupo al q petrenece (corregir cabecera)
2)	No se ven comentarios en la instancia 2, subscripciones???
3)	En la I6 debe recargar para q aprezca, y colocar titulo de instancia
4)	I7 colocar titulo de la  instancia
5)	I8 puedo ver un grupo como animador cdo no debería (grupos comp),,agregar  filtro en el cliente

//DD 14/08/2017
agregando gestion de usuarios al sistema, Trabajando en el redireccionamiento a pagina de lista de sesiones si es usuario
estandar, y si es administrador al menu del administrador.

//17/08/2017
Parado en la fucion findOne usada en  el helper "estadoInscri" del template sesionDispo , no me entrega nada a pesar que hay elementos en la base de datos

//22/08/2017
trabajando en la funcion updateEstadoInscripcion de /lib/collections/inscripciones.js
No puedo aun determinar como validar al parametro modifier, pues modifier trae lo siguiente
      
      // en modifier viene { '$set': { estadoInscripcio: 'no_aceptado' } }
28/08/2017
Faltaria comprobar que tabular tables no viola las medidas de seguridad , es decir si un usario comun puede acceder a las paginas donde hay un tabular y puede ver los id de todos los usuarios por ejemplo

01/09/2017 
Sobre ELIMINACION DE UN MIEMBRO DE UNA SESION DE CREATIVIDA O UN MIEMBRO INSCRIPTO A UNA SESION DE CREATIVIDAD
Un animador o un inscripto o participante se puede eliminar solo si la sesion esta en estado de preparacion
 cosas a hacer
      crear un campo en sesion que indique el estado , que sea en preparacion, en ejecucion, terminada
      Luegon en funcion de este estado activar los diferentes botones de eliminacion que tienen los distintos abm
     Animador, gestionar participante y gestionar inscriptos
 
 Trabajado en asignaAniS


 // Tareas

 1) Hay que especificar para cada coleccion la estructura de sus documentos, Hay que utilizar simple schema
 2) En lo posible no hacer depender el codigo de control de variables de la interface
 3) Reducir al minimo el codigo en la interface utilizar autoforms
 4) Metodos todos al servidor, en lo posible todo las lecturas y escrituras de datos en las colecciones hacerlas
    usando metodos
 5) Validacion de datos
 		5.1) eliminar el crAttributes, no se dice nada el codigo por si mismo deberia inducir a lo que se esta haciendo
 		5.2) utilizar check () para validar, si utilizamos simple schema validar datos utilizando el simpleschema.
 6) En lo posible no utilizar _.extend, es muy dificil seguir el codigo. Perfectamente puedo ir almacenando mis datos procesados en 
    variables y al final armar mi estructura de datos. Mas claro que extend es utilizar los selectors de atributos de un estructura 
    de datos para formar una nueva estructura
    Por ejemplo metodo insertar nueva sesion en sesion.js
    Version Actual
	   
			  sesionInsert: function(crAttributes) //se verifica q el ususario este autenticado
			  {
			    check(Meteor.userId(), String);
			    // check(crAttributes, {
			    //    SC: String
			    // });
			    check(crAttributes, Match.Where(function(crAttributes){
			        _.each(crAttributes, function (doc) {
			          // do your checks and return false if there is a problem 
			        });
			        // return true if there is no problem
			        return true;

			      }));

			    var user = Meteor.user();
			    var datos = _.extend(crAttributes, {
			      userId: user._id,
			      author: user.username,
			      submitted: new Date(),
				    estado: 'activa',
			      instActual: -1
			    });
			    var crId = Sesion.insert(datos);
			    return {
			      _id: crId
			    };
			  },
	Version Propuesta
		sesionInsert: function(datosSesion) //se verifica q el ususario este autenticado
        {
           // validacion 
          check(datosSesion,SesionBasicSchema);

          console.log("pase validacion datos sesion");
          //Verifica Identidad y autorizacion para crear sesion
              if (!this.userId) {
                   throw new Meteor.Error('Acceso invalido',
                  'Ustede no esta logeado');
                 }
              else // verifica si tiene privilegios de administrador
               { 
                usuario= Meteor.users.findOne({_id: this.userId});
                rol=usuario.rol;
                if  (rol!="Administrador") 
                {
                    console.log("error no es administrador");
                    throw new Meteor.Error('Acceso invalido',
                    ' Para acceder a esta funcionalidad necesita ser Administrador');
                }
               }
                // Si esta autorizado comienza proceso
          
          var user = Meteor.user(); // Estoy servidor 
          var docSesion={
            tematica_id:datosSesion.tematica_id,
            nombre:datosSesion.nombre,
            fecha1:datosSesion.fecha1,
            fecha2:datosSesion.fecha2,
            hora1:datosSesion.hora1,
            hora2:datosSesion.hora2,
            instancia1:datosSesion.instancia1,
            instancia2:datosSesion.instancia2,
            instancia3:datosSesion.instancia3,
            instancia4:datosSesion.instancia4,
            instancia5:datosSesion.instancia5,
            instancia6:datosSesion.instancia6,
            instancia7:datosSesion.instancia7,
            instancia8:datosSesion.instancia8,
            userId: user._id,
            author: user.username,
            submitted: new Date(),
            estado: 'activa',
            instActual: -1
            }       
                // Valida el documento , luego inserta nueva sesion   
                check(docSesion, SesionSchema)
        return Sesion.insert(docSesion);
        },   
7) Documentar los que mas se pueda

